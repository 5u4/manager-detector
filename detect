#!/usr/bin/python
import face_recognition
import cv2
from subprocess import call
import time
from services import option, is_ignored_faces

# start a video capture in main camera
video_capture = cv2.VideoCapture(option('came'))

# check if is on rest
resting = False

frame_counts = 0

# Warning
print('WARNING: Using it at inappropriate occasions bears your own consequences.')

# loop and check every frame
while True:
    frame_counts += 1

    # skip some frames
    if frame_counts % option('rate') != 0:
        continue

    # read video output
    _, frame = video_capture.read()

    # resize frame
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)

    # convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
    small_frame = small_frame[:, :, ::-1]

    # get face locations
    face_locations = face_recognition.face_locations(small_frame)
    face_encodings = face_recognition.face_encodings(small_frame, face_locations)

    # check if face detected
    has_not_ignored_face = True if face_locations and not is_ignored_faces(face_encodings) else False

    # show the video capture window and if face is found
    if option('show'):
        # print to see if face is detected
        print(has_not_ignored_face)

        # show video capture window
        cv2.imshow('Manager Detector', frame)

    # if face is detected
    if has_not_ignored_face:
        # bring up working app
        call(['open', '-a', option('work')])
        resting = False
        # take a rest
        time.sleep(option('rest'))

    # when left
    elif not resting and not option('safe'):
        # bring up other app
        call(['open', '-a', option('leis')])
        resting = True

    # exit video capturing when key is hit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# end video capturing
video_capture.release()
cv2.destroyAllWindows()
